name,parameters,examples,description,notes,version,scope
always,<bool>boolean.,always = yes,always returns true or false. useful for debugging.,,1,any
AND,triggers,and = {     original_tag = ger     has_stability > 0.5 },"returns false if any sub-trigger returns false, true otherwise. evaluation stops at the first false sub-trigger. ",virtually all places that expect a trigger use an implicit and-trigger.,1,any
OR,triggers,or = {     original_tag = eng     original_tag = usa },"returns true if any sub-trigger returns true, false otherwise. evaluation stops at the first true sub-trigger. ",,1,any
NOT,triggers,not = {     has_stability > 0.5     has_war_support > 0.5 },"returns false if any sub-trigger returns true, true otherwise. evaluation stops at the first true sub-trigger. ",,1,any
count_triggers,amount = <int>triggers,count_triggers = {     amount = 2     10 = { state_population = 100000 }     11 = { state_population = 100000 }     12 = { state_population = 100000 } },"sums the results of all sub-triggers (false=0, true=1) and returns true if the sum is at least amount. ",,1.5,any
if,limit = <and-trigger> the condition. else_if = <if-trigger> alternative condition. optional. else = <and-trigger> final alternative condition. optional. triggers ,"if = {     limit = {         has_dlc = ""poland: united and ready""     }     has_political_power > 100     else = {         has_war_support > 0.5     } } ","if limit is true, the sub-triggers are evaluated like an and-trigger. if limit is false, else_if blocks are tried in sequence and finally else (if present). otherwise true is returned. ","else_if and else can also follow directly after the if trigger, instead of being nested. ",1,any
hidden_trigger,triggers,hidden_trigger = {     country_exists = ger },"like and-trigger, but the condition is not shown in tooltips. ",,,any
custom_trigger_tooltip,tooltip = <string>triggers,"custom_trigger_tooltip = {     tooltip = sunrise_invasion_tt		     any_state = {         is_owned_by = jap         is_on_continent = europe         is_coastal = yes     } } ","like and-trigger, but tooltips show tooltip. ",,,any
has_global_flag,<string>the flag to check.,has_global_flag = my_flag,checks if the specified flag has been set.,,1,any
has_global_flag,flag = <string>the flag to check. value = <int>the flag value to check for. optional. date = <date>the flag creation date to check for. optional. days = <int>the duration the flag existed for. optional. ,has_global_flag = {     flag = my_flag     days > 30     date > 1936.6.1     value > 0 } ,"compares the specified flag's last set date, days since last set, and/or value. ","if not set, the value comparison is >0. value is limited between -32768 and 32767. ",1,any
has_dlc,<string>the dlc name to check for.,"has_dlc = ""waking the tiger"" ",checks if the specified dlc is enabled.,,1,any
has_start_date,<date>the date to check for.,has_start_date > 1950.01.01,checks if the specified date was the start date used for the current game.,must use either > or < operators.,1,any
date,<date>the date to check for.,date < 1950.01.01,checks if the specified date against the current date.,must use either > or < operators.,1,any
difficulty,<int>the difficulty value.,difficulty > 0,checks if the specified difficulty against the current difficulty.,must use either > or < operators.,1,any
has_any_custom_difficulty_setting,<bool>boolean.,has_any_custom_difficulty_setting = yes,checks if any country has a custom difficulty setting active.,,1,any
has_custom_difficulty_setting,<string>the setting to check.,has_custom_difficulty_setting = custom_diff_strong_sov,,,1,any
game_rules_allow_achievements,<bool>boolean.,game_rules_allow_achievements = yes,checks if all of the active game rule options allow achievements.,,1.9,any
country_exists,<scope> / <variable>the country to check.,country_exists = ger,checks if the specified country currently exists in game.,,1,any
is_ironman,<bool>boolean.,is_ironman = yes,checks if the current game is running in ironman mode.,,1,any
is_historical_focus_on,<bool>boolean.,is_historical_focus_on = yes,checks if the current game is running with historical focuses on.,,1,any
is_tutorial,<bool>boolean.,is_tutorial = yes,checks if the current game is running in tutorial mode.,,1,any
is_debug,<bool>boolean.,is_debug = yes,checks if game is in debug mode (launched with -debug argument).,,1.9,any
threat,<float>the amount to check for.,threat > 0.5,checks if world tension is above the specified amount.,must use either > or < operators.,1,any
has_game_rule,<string>the game rule to check for. <string> / <bool>the option to check. ,has_game_rule = { rule = ger_can_remilitarize_rhineland option = yes },checks if a game rule is set to a particular option.,,1.5,any
exists,<bool>boolean.,exists = yes,checks if the current scope exists in game.,,1,country
tag,<scope> / <variable>the country to check.,tag = ger tag = var:my_country,checks if the current scope is the specified country.,,1,country
original_tag,<scope> / <variable>the country to check.,original_tag = ger original_tag = var:my_country,checks if the current scope was ever the specified country.,,1,country
is_ai,<bool>boolean.,is_ai = yes,checks if the current scope is ai.,,1,country
has_country_flag,<string>the flag to check.,has_country_flag = my_flag,checks if the current scope has the specified flag.,,1,country
has_country_flag,flag = <string>the flag to check. value = <int>the flag value to check for. optional. date = <date>the flag creation date to check for. optional. days = <int>the duration the flag existed for. optional. ,has_country_flag = {     flag = my_flag     days > 30     date > 1936.6.1     value > 0 } ,"compares the specified flag's last set date, days since last set, and/or value. ","if not set, the value comparison is >0. value is limited between -32768 and 32767. ",1,country
has_cosmetic_tag,<string>the cosmetic tag to check.,has_cosmetic_tag = sov_custom,checks if the current scope has the specified cosmetic tag active.,,1.5,country
has_decision,<string>the decision to check.,has_decision = my_decision,checks if the current scope has the specified decision activated.,,1.5,country
has_dynamic_modifier,"modifier = <string>the dynamic_modifier to check.  scope = <scope> the country to check. optional, if the original modifier has been targeted.  ",has_dynamic_modifier = {     modifier = my_dynamic_modifier     scope = ger } ,checks if the current scope has the specified dynamic modifier activated.,,1.6,country
has_active_mission,<string>the mission to check.,has_active_mission = my_mission,checks if the current scope has the specified mission active.,,1.5,country
has_focus_tree,<string>the focus tree to check.,has_focus_tree = soviet_tree,checks if the current scope has the specified focus tree.,,1.3,country
has_completed_focus,<string>the focus to check.,has_completed_focus = my_focus,checks if the current scope has the specified focus completed.,,1,country
focus_progress,focus = <string>the focus to check. progress = <string>the progress to check for. ,focus_progress = {     focus = my_focus     progress > 0.5 } ,checks if the specified focus has been completed the specified percent for the current scope.,must use either > or < operators for progress.,1,country
has_political_power,<float>the amount to check for.,has_political_power > 100,checks if the current scope has the specified amount of political power.,must use either > or < operators.,1,country
political_power_daily,<float> / <variable>the amount to check for.,political_power_daily > 1,checks if the current scope has the specified amount of daily political power gain.,must use either > or < operators.,1.5,country
political_power_growth,<float> / <variable>the amount to check for.,political_power_growth > 1,checks if the current scope has the specified amount of daily political power gain.,must use either > or < operators.,1.5,country
command_power,<float> / <variable>the amount to check for.,command_power > 1,checks if the current scope has the specified amount of command power.,must use either > or < operators.,1.5,country
command_power_daily,<float> / <variable>the amount to check for.,command_power_daily > 1,checks if the current scope has the specified amount of daily command power gain.,must use either > or < operators.,1.5,country
has_war_support,<float> / <variable>the amount to check for.,has_war_support > 0.5,checks if the current scope has the specified percentage of war support.,must use either > or < operators.,1.5,country
has_stability,<float> / <variable>the amount to check for.,has_stability > 0.5,checks if the current scope has the specified percentage of stability.,must use either > or < operators.,1.5,country
<ideology>,<ideology> = <float>the amount of the ideology to check for.,fascism > 0.5,checks if the current scope has the specified ideology above the specified amount.,,1,country
has_government,<string>the ideology to check for.,has_government = fascism,checks if the current scope ruling party is the specified ideology.,,1,country
has_elections,<bool>boolean.,has_elections = yes,checks if the current scope holds elections.,,1,country
is_staging_coup,<bool>boolean.,is_staging_coup = yes,checks if the current scope is staging a coup.,,1.3,country
is_target_of_coup,<bool>boolean.,is_target_of_coup = yes,checks if the current scope is the target of a coup.,,1,country
has_civil_war,<bool>boolean.,has_civil_war = yes,checks if the current scope has a civil war active.,,1,country
civilwar_target,<scope>the target country.,civilwar_target = ger,checks if the specified country is a target of a civil war.,,1,country
has_manpower_for_recruit_change_to,value = <float>the amount to check for. group = <group>the group to check for. ,has_manpower_for_recruit_change_to = {     value > 0.05     group = mobilization_laws },checks if the current scope has the specified amount of manpower for changing the specified idea group.,must use either > or < operators as = operator checks for the exact value,1,country
has_country_leader,id = <int>the id to check for. optional. name = <string>the name to check for. optional. ruling_only = yeslimit check to ruling only. ,"has_country_leader = {     id = 10 }  has_country_leader = {     name = ""john smith""     ruling_only = yes }  ",checks if the current scope has the specified country leader.,,1.3,country
has_rule,<string>the rule to check for., has_rule = {     can_create_factions } ,checks if the current scope has the specified country rule.,,1.6,country
<building>,<building> = <int>the amount of the specified building to to check for.,arms_factory > 10,checks if the current scope has the specified amount of the specified building.,must use either > or < operators.,1,country
num_of_military_factories,<int>the amount to check for.,num_of_military_factories > 10,checks if the current scope has the specified amount of military factories.,must use either > or < operators.,1,country
num_of_civilian_factories,<int>the amount to check for.,num_of_civilian_factories > 10,checks if the current scope has the specified amount of civilian factories.,must use either > or < operators.,1,country
num_of_naval_factories,<int>the amount to check for.,num_of_naval_factories > 10,checks if the current scope has the specified amount of dockyards.,must use either > or < operators.,1,country
num_of_available_military_factories,<int>the amount to check for.,num_of_available_military_factories > 10,checks if the current scope has the specified amount of available military factories.,must use either > or < operators.,1,country
num_of_available_civilian_factories,<int>the amount to check for.,num_of_available_civilian_factories > 10,checks if the current scope has the specified amount of available civilian factories.,must use either > or < operators.,1,country
num_of_available_naval_factories,<int>the amount to check for.,num_of_available_naval_factories > 10,checks if the current scope has the specified amount of available dockyards.,must use either > or < operators.,1,country
num_of_factories,<int>the amount to check for.,num_of_factories > 10,"checks if the current scope has the specified amount of military, civilian or dockyard factories. ",must use either > or < operators.,1,country
num_of_civilian_factories_available_for_projects,<int>the amount to check for.,num_of_civilian_factories_available_for_projects > 10,checks if the current scope has the specified amount of civilian factories usable for projects.,must use either > or < operators.,1.5,country
ic_ratio,tag = <scope>the country to check. ratio = <float>the ratio to check for. ,ic_ratio = {     tag = ger     ratio > 0.5 } ,checks if the current scope has the specified ratio of factories with the target country.,must use either > or < operators for ratio.,1,country
has_damaged_buildings,<bool>boolean.,has_damaged_buildings = yes,checks if the current scope has any damanged buildings in their states.,,1,country
has_built,type = <building>the building to check for. value = <int>the amount to check for. ,has_built = {     type = arms_factory     value > 10 } ,checks if the current scope has built the specified building the specified number of times.,must use either > or < operators for value.,1,country
has_tech,<string>the technology to check for.,has_tech = my_technology,checks if the current scope has the specified technology.,,1,country
is_researching_technology,<string>the technology to check for.,is_researching_technology = my_tech,checks if the current scope is currently researching the specified technology.,,1,country
can_research,<string>the technology to check for.,can_research = my_tech,checks if the current scope can start researching the specified technology.,,1,country
original_research_slots,<int>the amount to check for.,original_research_slots > 3,checks if the current scope had the specified amount of slots at game start.,must use either > or < operators.,1,country
amount_research_slots,<int>the amount to check for.,amount_research_slots > 3,checks if the current scope has the specified amount of research slots.,must use either > or < operators.,1.3,country
is_in_tech_sharing_group,<string>the group to check for.,is_in_tech_sharing_group = us_research,checks if the current scope is in the specified technology sharing group.,,1.3,country
num_tech_sharing_groups,<int>the amount to check for.,num_tech_sharing_groups > 3,checks if the current scope is in the specified amount of technology sharing groups.,must use either > or < operators.,1.3,country
has_tech_bonus,technology = <string>the technology to check for. optional. category = <string>the category to check for. optional. ,has_tech_bonus = {     technology = my_tech  has_tech_bonus = {     category = my_category } ,"checks if the current scope has a technology bonus in the specified category, or for the specific technology. ",,1.3,country
land_doctrine_level,<int>the amount to check for.,land_doctrine_level > 2,checks if the current scope has the specified amount of land doctrine technologies.,must use either > or < operators.,1,country
has_idea,<string>the idea to check for.,has_idea = my_idea,checks if the current scope has the specified idea.,,,country
has_idea_with_trait,<string>the trait to check for.,has_idea_with_trait = my_trait,checks if the current scope has any ideas with the specified trait.,,1,country
has_available_idea_with_traits,idea = <string>the trait to check for. limit = <int>the amount to check for. ,has_available_idea_with_traits = {     idea = my_trait     limit = 1 } ,checks if the current scope has the specified amount of ideas with the specified trait.,,1,country
amount_taken_ideas,amount = <int>the amount to check for. slots = { <string> }the slot type. ,amount_taken_ideas = {     amount > 3     slots = {         political_advisor     } } ,checks if the current scope has the specified amount of ideas of the specified slot type.,slots types are found in /hearts of iron iv/common/idea_tags/*.txt.,1,country
is_major,<bool>boolean.,is_major = yes,checks if the current scope is considered a major.,,1,country
is_in_faction_with,<scope> / <variable>the country to check for.,is_in_faction_with = ger is_in_faction_with = var:country,checks if the current scope is in a faction with the specified country.,,1,country
is_in_faction,<bool>boolean.,is_in_faction = yes,checks if the current scope is in a faction.,,1,country
is_faction_leader,<bool>boolean.,is_faction_leader = yes,checks if the current scope is the leader of a faction.,,1,country
num_faction_members,<int>the amount to check for.,num_faction_members > 1,checks if the faction of the current scope has the specified amount of members.,must use either > or < operators.,1,country
has_non_aggression_pact_with,<scope> / <variable>the country to check for.,has_non_aggression_pact_with = ger,checks if the current scope has a non-aggression pact with the specified country.,,1,country
is_guaranteed_by,<scope> / <variable>the country to check for.,is_guaranteed_by = ger,checks if the current scope has been guaranteed by the specified country.,,1,country
has_guaranteed,<scope> / <variable>the country to check for.,has_guaranteed = ger,checks if the current scope has guaranteed the specified country.,,1,country
has_military_access_to,<scope> / <variable>the country to check for.,has_military_access_to = ger,checks if the current scope has military access to the specified country.,,1,country
gives_military_access_to,<scope> / <variable>the country to check for.,gives_military_access_to = ger,checks if the current scope gives military to the specified country.,,1,country
is_neighbor_of,<scope> / <variable>the country to check for.,is_neighbor_of = ger,checks if the current scope is a neighbor of the specified country.,,1,country
is_owner_neighbor_of,<scope> / <variable>the country to check for.,is_owner_neighbor_of = ger,checks if the current scope is a neighbor of the specified country with their core territory only.,,1,country
is_puppet_of,<scope> / <variable>the country to check for.,is_puppet_of = ger,checks if the current scope is a puppet of the specified country.,,1,country
is_subject_of,<scope> / <variable>the country to check for.,is_subject_of = ger,checks if the current scope is a subject of the specified scope.,,1,country
is_puppet,<bool>boolean.,is_puppet = yes,"returns true if the current country has an autonomy level with is_puppet = yes, false otherwise. ",,1,country
is_subject,<bool>boolean.,is_subject = yes,checks if the current scope is a subject.,,1,country
num_subjects,<int>the amount to check for.,num_subjects > 3,checks if the current scope has the specified amount of subjects.,must use either > or < operators.,1.3,country
has_autonomy_state,<string>the autonomy state to check for.,has_autonomy_state = autonomy_dominion,checks if the current scope is in the specified autonomous state.,,1,country
compare_autonomy_state,<string>the autonomy state to check for.,compare_autonomy_state > autonomy_dominion,checks if the current scope autonomy state is less or greater than the specified autonomy state.,must use either > or < operators.,1,country
compare_autonomy_progress_ratio,<float>the amount to check for.,compare_autonomy_progress_ratio > 0.5,checks if the current scope autonomy progress is at the specified ratio.,must use either > or < operators.,1.3,country
has_opinion_modifier,<string>the opinion modifier to check for.,has_opinion_modifier = my_modifier,checks if the current scope has the specified opinion modifier.,,1,country
has_opinion,target = <scope>the country to check for. value = <float>the amount to check for. ,has_opinion = {     target = ger     value = 100 } ,checks if the current scope has the specified opinion with the specified country.,must use either > or < operators.,1,country
has_relation_modifier,target = <scope>the country to check for. modifier = <modifier>the modifier to check for. ,has_relation_modifier = {     target = ger     modifier = my_modifier } ,checks if the current scope has the specified relation modifier with the specified country.,,1,country
all_allied_country,triggers,all_allied_country = {     has_stability > 0.8 },returns true if this is in a faction where all other countries fulfill the sub-triggers; false otherwise. evaluation stops early if any ally fails the check.,within the trigger prev is the country doing the check and this is the ally.,,country
any_allied_country,triggers,any_allied_country = {     has_stability > 0.8 },returns true if this is in a faction where at least one other country fulfills the sub-triggers; false otherwise. evaluation stops early if any ally passes the check.,within the trigger prev is the country doing the check and this is the ally.,,country
any_neighbor_country,triggers,any_neighbor_country = {     has_stability > 0.8 },returns true if at least one other country that controls a province adjacent to a province controlled by this fulfills the sub-triggers; false otherwise. evaluation stops early if any neighbor passes the check.,within the trigger prev is the country doing the check and this is the neighbor.,,country
all_neighbor_country,triggers,all_neighbor_country = {     has_stability > 0.8 },returns false if any other country that controls a province adjacent to a province controlled by this fails the sub-triggers; true otherwise. evaluation stops early if any neighbor fails the check.,within the trigger prev is the country doing the check and this is the neighbor. the list of neighbor countries is pre-calculated.,,country
any_home_area_neighbor_country,triggers,any_home_area_neighbor_country = {     has_stability > 0.8 },returns true if this has a home area and at least one country controlling an adjacent area to it fulfills the sub-triggers; false otherwise. the home area is the largest contiguous area controlled by this that contains at least one province of its capital state. evaluation stops early if any neighbor passes the check.,within the trigger prev is the country doing the check and this is the neighbor.,,country
has_war,<bool>boolean.,has_war = yes,checks if the current scope is at war.,,1,country
has_war_with,<scope> / <variable>the country to check for.,has_war_with = ger has_war_with = var:country,checks if the current scope is at war with the specified country.,,1,country
has_offensive_war_with,<scope> / <variable>the country to check for.,has_offensive_war_with = ger,checks if the current scope is in an offensive war against the specified country.,,1,country
has_defensive_war_with,<scope> / <variable>the country to check for.,,checks if the current scope is in an defensive war against the specified country.,,1,country
has_offensive_war,<bool>boolean.,has_offensive_war = yes,checks if the current scope is in an offensive war.,,1,country
has_defensive_war,<bool>boolean.,has_defensive_war = yes,checks if the current scope is in a defensive war.,,1,country
has_war_together_with,<scope> / <variable>the country to check for.,has_war_together_with = ger,checks if the current scope is in a war alongside the specified country.,,1,country
surrender_progress,<float> / <variable>the amount to check for.,surrender_progress > 0.1,checks if the current scope has the specified amount of surrender progress.,must use either > or < operators.,1,country
any_war_score,<float>the amount to check for.,any_war_score > 10,checks if the current scope has the specified amount of war progress (not war participation)[1] in any war.,must use either > or < operators.,1,country
has_capitulated,<bool>boolean.,has_capitulated = yes,checks if the current scope has capitulated.,,1,country
has_border_war_with,<scope> / <variable>the country to check for.,has_border_war_with = ger,checks if the current scope has a border war with the specified country.,,1.5,country
has_border_war_between,attacker = <scope> / <variable>the state to check for. defender = <scope> / <variable>the state to check for. ,has_border_war_between = {     attacker = 1     defender = 2 } ,checks if their is a border war between the two specified states.,,1.5,country
has_border_war,<bool>boolean.,has_border_war = yes,checks if the current scope has a border war active.,,1.5,country
has_added_tension_amount,<float> / <variable>the amount to check for.,has_added_tension_amount = 10,checks if the current scope has caused the specified amount of world tension.,must use either > or < operators.,1,country
has_wargoal_against,<scope> / <variable>the country to check for.,has_wargoal_against = ger,checks if the current scope has any wargoal against the specified country.,,1,country
has_wargoal_against,target = <scope> / <variable>the country to check for. type = <string>the type of wargoal to check for. ,has_wargoal_against = {     target = from     type = take_state } ,checks if the current scope has a specific wargoal type against the specified country.,,1.8,country
is_justifying_wargoal_against,<scope> / <variable>the country to check for.,is_justifying_wargoal_against = ger,checks if the current scope is justifying a wargoal against the specified country.,,1,country
has_annex_war_goal,<scope> / <variable>the country to check for.,has_annex_war_goal = ger,checks if the current scope has the annex wargoal against the specified country.,,1,country
any_claim,<bool>boolean.,any_claim = yes,checks if the current scope has any claims on another country.,,1,country
is_in_peace_conference,<bool>boolean.,is_in_peace_conference = yes,checks if the current scope is in a peace conference.,,1,country
any_enemy_country,triggers,any_enemy_country = {     has_stability > 0.8 },"returns true if any country is at war with this, exists, and fulfills the sub-triggers; false otherwise. evaluation stops at the first true sub-trigger. ",within the trigger prev is the country doing the check and this is the enemy.,,country
all_enemy_country,triggers,all_enemy_country = {     has_stability > 0.8 },"returns false if any country is at war with this, exists, and fails the sub-triggers; true otherwise. evaluation stops at the first false sub-trigger. ",within the trigger prev is the country doing the check and this is the enemy.,,country
controls_state,<scope> / <variable>the state to check for.,controls_state = 39 controls_state = var:state,checks if the current scope has control of the specified state.,,1,country
owns_state,<scope> / <variable>the state to check for.,owns_state = 39,checks if the current scope owns the specified state.,,1,country
num_of_controlled_states,<int>the amount to check for.,num_of_controlled_states = 5,checks if the current scope has the specified amount of controlled states.,must use either > or < operators.,1,country
num_occupied_states,<int>the amount to check for.,num_occupied_states = 5,checks if the current scope has the specified amount of occupied states.,must use either > or < operators.,1,country
has_full_control_of_state,<scope> / <variable>the state to check for.,has_full_control_of_state = 39,checks if the current scope has control and ownership of the specified state.,,1.3,country
has_resources_amount,resource = <string>the resource to check for. amount = <int>the amount to check for. state = <scope>the estate to check for. defaults to the current state in a state scope. ,has_resources_amount = {     resource = oil     amount > 10     state = 49 } ,checks if the specified state has the specified amount of the specified resource.,must use either > or < operators for amount.,1.3,country
any_owned_state,triggers (state scope),any_owned_state = {     is_coastal = yes },returns true if at least one state controlled by this passes the sub-triggers; false otherwise. evaluation stops early when a state passes the check.,the sub-triggers are evaluated with a state scope for each owned state.,,country
all_owned_state,triggers (state scope),all_owned_state = {     is_controlled_by = root },returns false if any state controlled by this fails the sub-triggers; true otherwise. evaluation stops early when a state fails the check.,the sub-triggers are evaluated with a state scope for each owned state.,,country
has_army_experience,<float> / <variable>the amount to check for.,has_army_experience = 10 has_army_experience = var:number,checks if the current scope has the specified amount of army experience.,must use either > or < operators as = operator checks for the exact value,1.3,country
has_air_experience,<float> / <variable>the amount to check for.,has_air_experience = 10,checks if the current scope has the specified amount of air experience.,must use either > or < operators as = operator checks for the exact value,1.3,country
has_navy_experience,<float> / <variable>the amount to check for.,has_navy_experience = 10,checks if the current scope has the specified amount of navy experience.,must use either > or < operators as = operator checks for the exact value,1.3,country
has_unit_leader,<int>the id to check for.,has_unit_leader = 1,checks if the current scope has a unit leader with the specified id.,,1,country
has_manpower,<float> / <variable>the amount to check for.,has_manpower = 1000,checks if the current scope has the specified amount of manpower.,must use either > or < operators as = operator checks for the exact value,1,country
has_army_manpower,size = <int>the amount to check for.,has_army_manpower = {     size > 1000 ,checks if the current scope has an army using the specified amount of manpower.,must use either > or < operators.,1,country
manpower_per_military_factory,<float>the amount to check for.,manpower_per_military_factory > 1000,checks if the current scope has the specified manpower times their number of military factories.,must use either > or < operators.,1,country
num_divisions,<int>the amount to check for.,num_divisions > 5,checks if the current scope has the specified amount of divisions.,must use either > or < operators.,1.3,country
num_of_nukes,<int>the amount to check for.,num_of_nukes > 5,checks if the current scope has the specified amount of nukes.,must use either > or < operators.,1,country
casualties,<int>the amount to check for.,casualties > 10000,checks if the current scope has suffered the specified amount of casualties.,must use either > or < operators.,1,country
amount_manpower_in_deployment_queue,<float>the amount to check for.,amount_manpower_in_deployment_queue > 1000,checks if the current scope has the specified amount of manpower in their deployment queue.,must use either > or < operators.,1.5,country
has_attache_from,<scope> / <variable>the country to check for.,has_attache_from = ger,checks if the current scope has an attache from the specified scope.,,1.5,country
has_attache,<bool>boolean.,has_attache = yes,checks if the current scope has an attache.,,1.5,country
is_lend_leasing,<scope> / <variable>the country to check for.,is_lend_leasing = ger,checks if the current scope is lend leasing to the specified scope.,,1,country
has_template,<string>the name of the template.,"has_template = ""infantry division"" ",checks if the current scope has a division template of the specified name.,,1,country
has_template_majority_unit,<string>the unit to check for.,has_template_majority_unit = infantry,checks if the current scope has a division template composed mostly of the specified unit.,,1,country
has_template_containing_unit,<string>the name of the unit.,has_template_containing_unit = light_armor,checks if the current scope has a division template contained any of the specified unit.,,1,country
strength_ratio,tag = <scope>the country to check for. ratio = <float>the ratio to check for. ,strength_ratio = {     tag = ger     ratio > 1 } ,checks if the current scope has the specified strength ratio against the specified country. the ratio is the number of fielded divisions of the current scope divided by those of tag (or 1 if tag has no divisions). the ratio gets increased by 10% if the current scope has a stronger air forces.[2],any comparison operator after ratio other than > gets interpreted as <.,1,country
naval_strength_ratio,tag = <scope>the country to check for. ratio = <float>the ratio to check for. ,naval_strength_ratio = {     tag = ger     ratio = 1 } ,checks if the current scope has the specified naval strength ratio against the specified country.,,1,country
alliance_strength_ratio,<float> / <variable>the ratio to check for.,alliance_strength_ratio > 0.5,checks if the current scope and allies has an army strength higher than the specified ratio against estimated enemy strength.,must use either > or < operators.,1,country
alliance_naval_strength_ratio,<float> / <variable>the ratio to check for.,alliance_naval_strength_ratio > 0.5,checks if the current scope and allies has an naval strength ratio higher than the specified ratio against estimated enemy strength.,must use either > or < operators.,1,country
enemies_strength_ratio,<float> / <variable>the ratio to check for.,enemies_strength_ratio > 0.5,checks if the estimated enemy army strength ratio is higher than the specified ratio.,must use either > or < operators.,1,country
enemies_naval_strength_ratio,<float> / <variable>the ratio to check for.,enemies_naval_strength_ratio > 0.5,checks if the estimated enemy naval strength ratio is higher than the specified ratio.,must use either > or < operators.,1,country
has_army_size,size = <float>the amount to check for. type = <string>the type to check for. optional. ,has_army_size = {     size > 10     type = armor } ,"checks if the current scope has the specified number of divisions, or of a specified type of division. ",types: infantry support artillery anti_tank armor must use either > or < operators for size. ,1,country
has_navy_size,size = <float>the amount to check for. type = <string>the type to check for. optional. ,has_navy_size = {     size > 10     type = capital_ship } ,"checks if the current scope has the specified number of ships, or of a specified type of ship. ",types: submarine screen_ship capital_ship carrier must use either > or < operators for size. ,1,country
has_deployed_air_force_size,size = <float>the amount to check for. type = <string>the type to check for. optional. ,has_deployed_air_force_size = {     size > 10     type = cas } ,"checks if the current scope has the specified number of aircraft, or of a specified type of aircraft. ",types: fighter cas naval_bomber interceptor suicide tactical_bomber strategic_bomber air_transport missile must use either > or < operators for size. ,1,country
divisions_in_state,size = <float>the amount to check for. type = <string>the type to check for. optional. state = <scope> / <variable>the state to check in. ,divisions_in_state = {     type = infantry     size > 10     state = 49 } ,checks if the specified state contains the specified amount of divisions.,types: infantry support artillery anti_tank armor must use either > or < operators for size. ,1,country
divisions_in_border_state,size = <float>the amount to check for. type = <string>the type to check for. optional. state = <scope> / <variable>the state to check in. border_state = <scope> / <variable>the border state to check in. ,divisions_in_border_state = {     type = infantry     size > 10     state = 49     border_state = var:state } ,checks if the border provinces between the specified state and border state contain the specified amount of divisions.,types: infantry support artillery anti_tank armor must use either > or < operators for size. ,1.5,country
ships_in_state_ports,size = <float>the amount to check for. type = <string>the type to check for. optional. state = <scope> / <variable>the state to check in. ,ships_in_state_ports = {     type = capital_ship     size > 10     state = 49 } ,"checks if the specified state contains the specified amount of ships, or of ships of the specified type. ",types: submarine screen_ship capital_ship carrier must use either > or < operators for size. ,1,country
has_volunteers_amount_from,tag = <scope>the country to check for. count = <int>the amount to check for. ,has_volunteers_amount_from = {     tag = ger     count > 10 } ,checks if the current scope has recieved volunteers from the specified country of the specified amounts.,must use either > or < operators for count.,1,country
estimated_intel_max_piercing,tag = <scope>the country to check for. value = <float>the amount to check for. ,estimated_intel_max_piercing = {     tag = ger     value > 0.5 } ,checks if the specified scope has the specified amount of piercing based on the current scope's intel.,must use either > or < operators for value.,1,country
estimated_intel_max_armor,tag = <scope>the country to check for. value = <float>the amount to check for. ,estimated_intel_max_armor = {     tag = ger     value > 0.5 } ,checks if the specified scope has the specified amount of armor based on the current scope's intel.,must use either > or < operators for value.,1,country
stockpile_ratio,archetype = <string>the equipment archetype to check for. ratio = <float>the ratio of equipment to check for. ,stockpile_ratio = {     archetype = infantry_equipment     ratio > 0.5 } ,checks if the current scope has stockpiled the specified equipment to the specified ratio against fielded equipment of the same type.,"must use either > or < operators for ratio.  for the convoy equipment which is not fielded as other equipments, ratio shall be not a percentage but a direct amount (for instance 256 convoys) ",1.5,country
has_equipment,"<equipment> = <int> / <variable>the equipment to check for, and the amount to check for. ",has_equipment = {     infantry_equipment_1 > 10 } ,checks if the current scope has the specified equipment to the specified amount.,must use either > or < operators.,1,country
has_any_license,<bool>boolean.,has_any_license = yes,checks if the current scope has any licenses from other countries.,,1,country
is_licensing_any_to,<scope>the country to check for.,is_licensing_any_to = ger,checks if the current scope is licensing to the specified scope.,,1,country
is_licensing_to,target = <scope>the country to check for. archetype = <string>the equipment archetype to check for. optional. equipment scope type = <string>the equipment to check for. optional. version = <int>the variant id of the equipment. optional. ,is_licensing_to = {     target = ger     archetype = infantry_equipment }  is_licensing_to = {     target = ger     equipment = {         type = light_tank_equipment         version = 1     } } ,checks if the current scope is licensing the specified equipment to the specified country.,,1,country
has_license,from = <scope>the country to check for. archetype = <string>the equipment archetype to check for. optional. equipment scope type = <string>the equipment to check for. optional. version = <int>the variant id of the equipment. optional. ,has_license = {     from = ger     archetype = infantry_equipment }  has_license = {     from = ger     equipment = {         type = light_tank_equipment         version = 1     } } ,checks if the current scope has a license for the specified equipment from the specified country.,,1,country
ai_irrationality,<int>the amount to check for.,ai_irrationality > 10,checks if the current scope ai has the specified irrationality.,must use either > or < operators.,1,country
ai_liberate_desire,target = <scope>the country to check for. count = <float>the amount to check for. ,ai_liberate_desire = {     target = ger     count > 1 } ,checks if the current scope ai has the specified liberation desire towards the specified country.,must use either > or < operators for count.,1,country
ai_has_role_division,<string>the role to check for.,ai_has_role_division = infantry,checks if the current scope ai has a division with the specified role.,roles are defined in /hearts of iron iv/common/ai_templates/*.txt,1,country
ai_has_role_template,<string>the role to check for.,ai_has_role_template = armor,checks if the current scope ai has a division template with the specified role.,roles are defined in /hearts of iron iv/common/ai_templates/*.txt,1,country
ai_wants_divisions,<int>the amount to check for.,ai_wants_divisions > 10,checks if the current scope ai desires the specified amount of divisions.,must use either > or < operators.,1,country
has_template_ai_majority_unit,<string>the unit to check for.,has_template_ai_majority_unit = infantry,checks if the current scope ai has a division template mostly made up of the specified unit.,,1,country
state,<scope> / <variable>the state to check for.,state = 10 state = var:state,checks if the current scope is the specified state.,,1,state
region,<int>the strategic region id to check for.,region = 10,checks if the current scope is a state in the specified strategic region.,,1,state
area,<int>the supply area id to check for.,area = 6,checks if the current scope is a state in the specified supply area.,,1,state
has_state_flag,<string>the flag to check for.,has_state_flag = my_flag,checks if the current scope has the specified flag.,,1,state
has_state_flag,flag = <string>the flag to check. value = <int>the flag value to check for. optional. date = <date>the flag creation date to check for. optional. days = <int>the duration the flag existed for. optional. ,has_state_flag = {     flag = my_flag     days > 30     date > 1936.6.1     value > 0 } ,"compares the specified flag's last set date, days since last set, and/or value. ","if not set, the value comparison is >0. value is limited between -32768 and 32767. ",1,state
<building>,<building> = <int>the amount of the specified building to to check for.,arms_factory > 10,checks if the current scope has the specified amount of the specified building.,must use either > or < operators.,1,state
state_population,<float>the amount to check for.,state_population > 10000,checks if the current scope has the specified state population.,must use either > or < operators.,1,state
is_capital,<bool>boolean.,is_capital = yes,checks if the current scope is a capital.,,1.5,state
is_controlled_by,<scope> / <variable>the country to check for.,is_controlled_by = ger,checks if the current scope is controlled by the specified country.,,1,state
is_fully_controlled_by,<scope> / <variable>the country to check for.,is_fully_controlled_by = ger,checks if the current scope is fully controlled by the specified country.,,1.5,state
is_owned_by,<scope> / <variable>the country to check for.,is_owned_by = ger,checks if the current scope is owned by the specified country.,,1,state
is_claimed_by,<scope> / <variable>the country to check for.,is_claimed_by = ger,checks if the current scope is claimed by the specified country.,,1,state
is_core_of,<scope> / <variable>the country to check for.,is_core_of = ger,checks if the current scope is a core of the specified country.,,1,state
is_owned_and_controlled_by,<scope> / <variable>the country to check for.,is_owned_and_controlled_by = ger,checks if the current scope is owned and controlled by the specified country.,,1,state
is_demilitarized_zone,<bool>boolean.,is_demilitarized_zone = yes,checks if the current scope is a demilitarized zone.,,1,state
is_border_conflict,<bool>boolean.,is_border_conflict = yes,checks if the current scope is part of a border war.,,1,state
is_in_home_area,<bool>boolean.,is_in_home_area = yes,checks if the current scope is connected to the capital state over land.,,1,state
is_coastal,<bool>boolean.,is_coastal = yes,checks if the current scope is a coastal state.,,1,state
is_island_state,<bool>boolean.,is_island_state = yes,checks if the current scope is a coastal state with no adjacent land states.,,1,state
is_on_continent,<string>the continent to check for.,is_on_continent = europe,checks if the current scope is on the specified continent.,continents are found in /hearts of iron iv/map/continent.txt.,1,state
has_state_category,<string>the category to check for.,has_state_category = rural,checks if the current scope has the specified category.,state categories are found in /hearts of iron iv/common/state_category/*.txt.,1,state
state_strategic_value,<int>the amount to check for.,state_strategic_value > 10,checks if the current scope has the specified strategic value.,must use either > or < operators.,1.5,state
state_and_terrain_strategic_value,<int>the amount to check for.,state_and_terrain_strategic_value > 10,checks if the current scope has the specified state and terrain strategic value.,must use either > or < operators.,1.5,state
free_building_slots,building = <string>the building to check for. size = <int>the amount to check for. include_locked = <bool>whether to include locked slots. ,free_building_slots = {     building = arms_factory     size > 10     include_locked = yes } ,checks if the current scope has available slots for the specified amount of buildings.,must use either > or < operators for size.,1,state
any_province_building_level,building = <string>the building to check for. limit = <int>the amount to check for. province scope id = <int>the province to check for. limit_to_border = <bool>whether to limit check to border provinces. ,any_province_building_level = {     province = {         id = 445         id = 494         limit_to_border = yes     }     building = bunker     level < 5 } ,checks if the current scope has the specified provincal building at the specified amount in the specified provinces.,must use either > or < operators for level.,1,state
num_owned_neighbour_states,owner = <scope>the country to check for. count = <int>the amount to check for. ,num_owned_neighbour_states = {     owner = ger     count = 2 } ,checks if the current scope has the specified amount of neighbor states belonging to the specified country.,must use either > or < operators for count.,1,state
has_claimed_state_in_peace_conference,<scope> / <variable>the country to check for.,has_claimed_state_in_peace_conference = ger,checks if the current scope has been claimed by the specified country in a peace conference.,,1,state
num_claimed_peace_conference_neighbour_states,owner = <scope>the country to check for. count = <int>the amount to check for. ,num_claimed_peace_conference_neighbour_states = {     owner = ger     count > 2 } ,checks if the current scope has the specified amount of neighbor states claimed by the specified country in a peace conference.,must use either > or < operators for count.,1,state
distance_to,distance = <float>the distance to check for. state = <scope>the state to compare against. ,distance_to = {     value > 1000     target = 49 } ,checks if the current scope is at the specified distance from the specified state.,must use either > or < operators for distance.,1,state
ships_in_area,area = <int>the strategic region to check for. size = <int>the amount to check for. ,,checks if the current scope has the specified amount of ships in the specified strategic region.,must use either > or < operators for count.,1,state
any_neighbor_state,triggers,any_neighbor_state = { is_coastal = yes },returns true if this has at least one adjacent state that fulfills the sub-triggers; false otherwise. evaluation stops early if any neighbor passes the check.,,,state
all_neighbor_state,triggers,all_neighbor_state = { is_coastal = yes },returns false if this has no adjacent states or at least one of them fails the sub-triggers; true otherwise. evaluation stops early if any neighbor fails the check.,,,state
has_id,<int>the id to check for.,has_id = 1,checks if the current scope has the specificed unit leader id.,,1.5,unit leader
has_unit_leader_flag,<string>the flag to check for.,has_unit_leader_flag = my_flag,checks if the current scope has the specified flag.,,1.5,unit leader
has_unit_leader_flag,flag = <string>the flag to check. value = <int>the flag value to check for. optional. date = <date>the flag creation date to check for. optional. days = <int>the duration the flag existed for. optional. ,has_unit_leader_flag = {     flag = my_flag     days > 30     date > 1936.6.1     value > 0 } ,"compares the specified flag's last set date, days since last set, and/or value. ","if not set, the value comparison is >0. value is limited between -32768 and 32767. ",1,unit leader
is_leading_army,<bool>boolean.,is_leading_army = yes,checks if the current scope is leading a single army.,,1.5,unit leader
is_leading_army_group,<bool>boolean.,is_leading_army_group = yes,checks if the current scope is leading an army group.,,1.5,unit leader
is_field_marshal,<bool>boolean.,is_field_marshal = yes,checks if the current scope is a field marshal.,,1.5,unit leader
is_assigned,<bool>boolean.,is_assigned = yes,checks if the current scope is an assigned unit leader.,,1.5,unit leader
has_trait,<string>the trait to check for.,has_trait = offensive_doctrine,checks if the current scope has the specified trait.,,1.5,unit leader
can_select_trait,<string>the trait to check for.,can_select_trait = offensive_doctrine,checks if the current scope can select the specified trait.,,1.5,unit leader
has_ability,<string>the ability to check for.,has_ability = glider_planes,checks if the current scope has the specified unit leader ability.,,1.5,unit leader
skill,<int>the amount to check for.,skill > 1,checks if the current scope has a skill above the specified amount.,must use either > or < operators.,1,unit leader
skill_advantage,<int>the amount to check for.,skill_advantage > 1,checks if the current scope has a skill advantage above the specified amount in against an enemy unit leader whilst in combat.,must use either > or < operators.,1,unit leader
planning_skill_level,<int>the amount to check for.,planning_skill_level > 1,checks if the current scope has a planning skill above the specified amount.,must use either > or < operators.,1.5,unit leader
logistics_skill_level,<int>the amount to check for.,logistics_skill_level > 1,checks if the current scope has a logistics skill above the specified amount.,must use either > or < operators.,1.5,unit leader
defense_skill_level,<int>the amount to check for.,defense_skill_level > 1,checks if the current scope has a defense skill above the specified amount.,must use either > or < operators.,1.5,unit leader
attack_skill_level,<int>the amount to check for.,attack_skill_level > 1,checks if the current scope has a attack skill above the specified amount.,must use either > or < operators.,1.5,unit leader
average_stats,<int>the amount to check for.,average_stats > 5,checks if the current scope has an average skill above the specified amount.,must use either > or < operators.,1.5,unit leader
is_border_war,<bool>boolean.,is_border_war = yes,checks if the current socpe is in a border war.,,1.5,unit leader
num_units,<int>the amount to check for.,num_units > 5,checks if the current scope is commanding the specified amount of divisions.,must use either > or < operators.,1.5,unit leader
hardness,<float>the amount to check for.,hardness > 0.5,checks if the current scope has the specified amount of hardness.,must use either > or < operators.,1,unit leader combat
armor,<float>the amount to check for.,armor > 0.5,checks if the current scope has the specified amount of armor units.,must use either > or < operators.,1,unit leader combat
dig_in,<float>the amount to check for.,dig_in > 0.5,checks if the current scope has the specified amount of dig in bonus.,must use either > or < operators.,1,unit leader combat
min_planning,<float>the amount to check for.,min_planning > 0.5,checks if the current scope has the specified amount of planning.,must use either > or < operators.,1,unit leader combat
fastest_unit,<float>the speed in km/h to check for.,fastest_unit > 12,checks if the current scope has a unit with the specified speed.,must use either > or < operators.,1,unit leader combat
temperature,<float>the temperature in celsius to check for.,temperature > 20,checks if the current scope is in a province with a temperature above the specified amount.,must use either > or < operators.,1,unit leader combat
reserves,<float>the amount to check for.,reserves > 10,checks if the current scope has the specified amount of reserves waiting.,must use either > or < operators.,1,unit leader combat
has_cavalry_ratio,<float>the ratio to check for.,has_cavalry_ratio > 0.5,checks if the current scope has the specified ratio of cavalry in their division composition.,must use either > or < operators.,1,unit leader combat
has_combat_modifier,<string>the modifier to check for.,has_combat_modifier = river_crossing,checks if the current scope has the specified combat modifier.,,1,unit leader combat
is_fighting_in_terrain,<string>the terrain to check for.,is_fighting_in_terrain = desert,checks if the current scope is fighting in the specified terrain.,,1,unit leader combat
phase,<bool>boolean.,phase = yes,checks if the current scope is in phase.,,1,unit leader combat
recon_advantage,<bool>boolean.,recon_advantage = yes,checks if the current scope has a recon advantage.,,1,unit leader combat
night,<bool>boolean.,night = yes,checks if the current scope is fighting at night.,,1,unit leader combat
frontage_full,<bool>boolean.,frontage_full = yes,checks if the current scope has a full combat width.,,1,unit leader combat
has_flanked_opponent,<bool>boolean.,has_flanked_opponent = yes,checks if the current scope has flanked their opponent.,,1,unit leader combat
has_max_planning,<bool>boolean.,has_max_planning = yes,checks if the current scope has the maximum planning bonus.,,1,unit leader combat
has_reserves,<bool>boolean.,has_reserves = yes,checks if the current scope has any reserves waiting.,,1,unit leader combat
is_amphibious_invasion,<bool>boolean.,is_amphibious_invasion = yes,checks if the current scope is performing an amphibious invasion.,,1,unit leader combat
is_attacker,<bool>boolean.,is_attacker = yes,checks if the current scope is attacking.,,1,unit leader combat
is_defender,<bool>boolean.,is_defender = yes,checks if the current scope is defending.,,1,unit leader combat
is_winning,<bool>boolean.,is_winning = yes,checks if the current scope is winning their battle.,,1,unit leader combat
is_fighting_air_units,<bool>boolean.,is_fighting_air_units = yes,checks if the current scope is fighting air units.,,1,unit leader combat
less_combat_width_than_opponent,<bool>boolean.,less_combat_width_than_opponent = yes,checks if the current scope is fighting with less combat width than their opponent.,,1,unit leader combat
has_carrier_airwings_on_mission,<bool>boolean.,has_carrier_airwings_on_mission = yes,checks if the current scope has carrier airwings on a mission.,,1,unit leader combat
has_carrier_airwings_in_own_combat,<bool>boolean.,has_carrier_airwings_in_own_combat = yes,checks if the current scope has carrier airwings in their own combat.,,1,unit leader combat
has_variable,<variable>the variable to check.,has_variable = my_var,checks if the specified variables exists for the current scope.,,1.5,any variables
check_variable,"var = <variable>the variable to check. value = <float> / <variable>the value to check for. compare = <type>the type of comparison. optional, can use < or > instead.  ",check_variable = {     var = my_var     value = 10     compare = greater_than_or_equals }  check_variable = {     my_var > 10 } ,check the specified variable for the current scope.,possible compare types: less_than less_than_or_equals greater_than greater_than_or_equals equals not_equals,1.5,any variables
print_variables,"print_global = <bool>print global variables. defaults to no. var_list = <list>the variables to print. defaults to all variables. file = <string>the file path to log to. defaults to ""variable_dump"". text = <string>text to prepend. defaults to ""no header"". append = <bool>whether to append to the file instead of overwrite. defaults to yes  ","print_variables = {     var_list = { myvar1 myvar2 }     file = ""my_dump_file""     text = ""my header"" } ",dumps the specified variables from the current scope and optionally the global scope into logs/variable_dumps/<file>.log. evaluates to true.,see variables#debugging,,any variables
